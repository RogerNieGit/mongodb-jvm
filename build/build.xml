<?xml version="1.0"?>
<project name="MongoDB JVM" default="build" xmlns:ivy="antlib:org.apache.ivy.ant">

	<property name="root" location="${basedir}/.." />

	<property file="${root}/build/private.properties" />
	<property file="${root}/build/custom.properties" />
	
	<property name="component.source" location="${root}/components/${component}/source" />
	<property name="component.resources" value="${root}/components/${component}/resources" />
	<property name="component.notices" location="${root}/components/notices" />
	
	<property name="dependencies" location="${root}/dependencies" />

	<property name="cache" location="${root}/build/cache" />
	<property name="cache.classes" location="${cache}/classes" />
	<property name="cache.jars" location="${cache}/jars" />
	<property name="cache.maven.pom" location="${cache}/maven/pom" />
	<property name="cache.maven.build" location="${cache}/maven/build" />

	<property name="distribution" location="${root}/build/distribution" />
	<property name="distribution.content" location="${distribution}/content" />
	<property name="distribution.libraries" location="${distribution.content}/libraries" />
	<property name="distribution.jars" location="${distribution.libraries}/jars" />
	<property name="distribution.jars.pattern" value="${distribution.libraries}/jars/[organisation]/[module]/[revision](/[branch])/[artifact](.[ext])" />
	<property name="distribution.reference" location="${distribution.content}/reference" />
	<property name="distribution.api" location="${distribution.reference}/documentation/api" />
	<property name="distribution.source" location="${distribution.content}/reference/source" />

	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpath="${dependencies}/libraries/jars/org.apache.ivy/ivy/${ivy.version}/ivy.jar" />

	<macrodef name="packages">
		<attribute name="suffix" />
		<sequential>
			<copy
				file="${distribution}/${component}-${component.version}${component.version.postfix}@{suffix}"
				todir="${packages.repo}/${packages.section}/${component.version}${component.version.postfix}"
				failonerror="false" />
		</sequential>
	</macrodef>

	<target name="ivy" description="Settings for Ivy">
		<ivy:settings file="${root}/build/ivy/settings.xml" />
	</target>

	<target name="dependencies" depends="ivy" description="Resolve dependencies">
		<ivy:resolve file="${root}/build/ivy/${component}.xml" type="jar" log="download-only" resolveId="${component}" />
		<ivy:cachepath pathid="dependencies" type="jar" resolveId="${component}" />
	</target>

	<target name="classes" depends="dependencies" description="Compile Java code">
		<mkdir dir="${cache.classes}" />
		<javac srcdir="${component.source}" destdir="${cache.classes}" source="${compile.version}" target="${compile.version}" includeAntRuntime="no" debug="${compile.debug}" bootclasspath="${compile.boot}">
			<classpath refid="dependencies" />
		</javac>
		<copy todir="${cache.classes}">
			<fileset dir="${component.resources}" />
		</copy>
	</target>

	<target name="javadocs" description="Create API documentation if not present">
		<available file="${distribution.api}" property="javadocs-present" />
		<antcall target="javadocs-overwrite" />
	</target>

	<target name="javadocs-overwrite" depends="dependencies" description="Create API documentation" unless="javadocs-present">
		<javadoc
			destdir="${distribution.api}" sourcepath="${component.source}" excludepackagenames="**.internal.*"
			access="protected" source="${compile.version}"
			windowtitle="${documentation.title} ${component.version}${component.version.postfix}" doctitle="${documentation.title} ${component.version}${component.version.postfix}"
			author="true" splitindex="true" use="true" version="true" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false"
			bootclasspath="${compile.boot}">
			
			<link href="${documentation.jvm}" />
			<link href="http://www.mozilla.org/rhino/apidocs/" />
			<link href="http://threecrickets.com/api/java/scripturian/" />
			<classpath refid="dependencies" />
			<bottom>
				<![CDATA[<i>${documentation.copyright}</i>]]>
			</bottom>
		</javadoc>
	</target>
	
	<target name="libraries" depends="classes" description="Create jar">
		<mkdir dir="${distribution.jars}" />
		<jar destfile="${distribution.jars}/${component.group}/${component.artifact}/${component.version}${component.version.postfix}/${component.artifact}.jar" basedir="${cache.classes}">
			<manifest>
				<attribute name="Implementation-Title" value="${component.group}:${component.artifact}" />
				<attribute name="Implementation-Version" value="${component.version}${component.version.postfix}" />
				<attribute name="Implementation-Vendor" value="Three Crickets" />
			</manifest>
		</jar>
	</target>

	<target name="distribution" depends="deploy-maven" description="Create Sincerity container">
		<copy todir="${distribution.content}/configuration/sincerity">
			<fileset dir="sincerity" />
			<filterchain>
				<replacetokens>
					<token key="VERSION" value="${component.version}${component.version.postfix}" />
					<token key="SINCERITY.VERSION" value="${sincerity.version}" />
					<token key="PRUDENCE.VERSION" value="${prudence.version}" />
				</replacetokens>
			</filterchain>
		</copy>
		<exec executable="${sincerity}">
			<arg value="container:create" />
			<arg value="--force" />
			<arg value="${distribution.content}" />
			<arg value="${sincerity.template}" />
			<arg value=":" />
			<arg value="repositories:attach" />
			<arg value="public" />
			<arg value="${component}" />
			<arg value="maven" />
			<arg value="${distribution.repo}" />
			<arg value=":" />
			<arg value="repositories:attach" />
			<arg value="public" />
			<arg value="three-crickets" />
			<arg value="maven" />
			<arg value="${dependencies.repo}" />
			<arg value=":" />
			<arg value="artifacts:install" />
			<arg value=":" />
			<arg value="repositories:detach" />
			<arg value="public" />
			<arg value="${component}" />
		</exec>
	</target>

	<target name="distribution-minimal" depends="libraries, javadocs" description="Assemble distribution">
		<copy todir="${distribution.source}/${component.group}/${component.artifact}/${component.version}${component.version.postfix}">
			<fileset dir="${component.source}" />
		</copy>
		<copy todir="${distribution.content}">
			<fileset dir="${component.notices}" />
		</copy>
		<ivy:retrieve type="jar" pattern="${distribution.jars.pattern}" log="quiet" resolveId="${component}" />
		<!-- Don't include engines in the distribution, they're too big! -->
		<delete dir="${distribution.jars}/org.mozilla" />
		<delete dir="${distribution.jars}/jdk.nashorn" />
	</target>

	<target name="deploy-maven" if="maven" depends="libraries" description="Deploy to Maven repository">
		<delete dir="${cache.maven.pom}" />
		<delete dir="${cache.maven.build}" />
		<copy todir="${cache.maven.pom}">
			<fileset dir="${root}/build/maven" excludes="**/*~" />
			<filterchain>
				<replacetokens>
					<token key="VERSION" value="${component.version}${component.version.postfix}" />
					<token key="DEPENDENCIES" value="${dependencies.repo}" />
					<token key="ROOT" value="${root}" />
					<token key="CACHE" value="${cache.maven.build}" />
					<token key="CONTENT" value="${distribution.content}" />
				</replacetokens>
			</filterchain>
		</copy>
		<exec executable="${maven}" dir="${cache.maven.pom}">
			<arg value="deploy" />
			<arg value="-DaltDeploymentRepository=default::default::${distribution.repo}" />
		</exec>
	</target>

	<target name="package-zip" depends="distribution" description="Create distribution package">
		<zip destfile="${distribution}/${component}-${component.version}${component.version.postfix}.zip">
			<zipfileset dir="${distribution.content}" excludes="cache/, logs/, sincerity" />
			<zipfileset dir="${distribution.content}" includes="sincerity" filemode="755" />
		</zip>
	</target>

	<target name="package" depends="package-zip" description="Create all packages and installers" />

	<target name="deploy-packages" if="packages.repo" description="Deploy to packages repository">
		<packages suffix="-installer.jar" />
		<packages suffix=".zip" />
		<packages suffix=".rpm" />
		<packages suffix=".deb" />
		<packages suffix="-osx-installer.zip" />
		<packages suffix="-windows-installer.exe" />
	</target>

	<target name="build" depends="distribution" description="Build distribution" />
	
	<target name="clean" description="Clean">
		<delete dir="${cache}" />
		<delete dir="${distribution}" />
	</target>
	
	<target name="rebuild" depends="clean, build" description="First clean and then build distribution" />
	
</project>
